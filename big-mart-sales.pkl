{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "f54ceaa2-923b-4375-adb0-05032ec33962",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "53d07954-ce92-40ea-9ac3-e23140207946",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "       }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Item_Identifier</th>\n",
       "      <th>Item_Weight</th>\n",
       "      <th>Item_Fat_Content</th>\n",
       "      <th>Item_Visibility</th>\n",
       "      <th>Item_Type</th>\n",
       "      <th>Item_MRP</th>\n",
       "      <th>Outlet_Identifier</th>\n",
       "      <th>Outlet_Establishment_Year</th>\n",
       "      <th>Outlet_Size</th>\n",
       "      <th>Outlet_Location_Type</th>\n",
       "      <th>Outlet_Type</th>\n",
       "      <th>Item_Outlet_Sales</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>FDA15</td>\n",
       "      <td>9.30</td>\n",
       "      <td>Low Fat</td>\n",
       "      <td>0.016047</td>\n",
       "      <td>Dairy</td>\n",
       "      <td>249.8092</td>\n",
       "      <td>OUT049</td>\n",
       "      <td>1999</td>\n",
       "      <td>Medium</td>\n",
       "      <td>Tier 1</td>\n",
       "      <td>Supermarket Type1</td>\n",
       "      <td>3735.1380</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>DRC01</td>\n",
       "      <td>5.92</td>\n",
       "      <td>Regular</td>\n",
       "      <td>0.019278</td>\n",
       "      <td>Soft Drinks</td>\n",
       "      <td>48.2692</td>\n",
       "      <td>OUT018</td>\n",
       "      <td>2009</td>\n",
       "      <td>Medium</td>\n",
       "      <td>Tier 3</td>\n",
       "      <td>Supermarket Type2</td>\n",
       "      <td>443.4228</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>FDN15</td>\n",
       "      <td>17.50</td>\n",
       "      <td>Low Fat</td>\n",
       "      <td>0.016760</td>\n",
       "      <td>Meat</td>\n",
       "      <td>141.6180</td>\n",
       "      <td>OUT049</td>\n",
       "      <td>1999</td>\n",
       "      <td>Medium</td>\n",
       "      <td>Tier 1</td>\n",
       "      <td>Supermarket Type1</td>\n",
       "      <td>2097.2700</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>FDX07</td>\n",
       "      <td>19.20</td>\n",
       "      <td>Regular</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>Fruits and Vegetables</td>\n",
       "      <td>182.0950</td>\n",
       "      <td>OUT010</td>\n",
       "      <td>1998</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Tier 3</td>\n",
       "      <td>Grocery Store</td>\n",
       "      <td>732.3800</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>NCD19</td>\n",
       "      <td>8.93</td>\n",
       "      <td>Low Fat</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>Household</td>\n",
       "      <td>53.8614</td>\n",
       "      <td>OUT013</td>\n",
       "      <td>1987</td>\n",
       "      <td>High</td>\n",
       "      <td>Tier 3</td>\n",
       "      <td>Supermarket Type1</td>\n",
       "      <td>994.7052</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Item_Identifier  Item_Weight Item_Fat_Content  Item_Visibility  \\\n",
       "0           FDA15         9.30          Low Fat         0.016047   \n",
       "1           DRC01         5.92          Regular         0.019278   \n",
       "2           FDN15        17.50          Low Fat         0.016760   \n",
       "3           FDX07        19.20          Regular         0.000000   \n",
       "4           NCD19         8.93          Low Fat         0.000000   \n",
       "\n",
       "               Item_Type  Item_MRP Outlet_Identifier  \\\n",
       "0                  Dairy  249.8092            OUT049   \n",
       "1            Soft Drinks   48.2692            OUT018   \n",
       "2                   Meat  141.6180            OUT049   \n",
       "3  Fruits and Vegetables  182.0950            OUT010   \n",
       "4              Household   53.8614            OUT013   \n",
       "\n",
       "   Outlet_Establishment_Year Outlet_Size Outlet_Location_Type  \\\n",
       "0                       1999      Medium               Tier 1   \n",
       "1                       2009      Medium               Tier 3   \n",
       "2                       1999      Medium               Tier 1   \n",
       "3                       1998         NaN               Tier 3   \n",
       "4                       1987        High               Tier 3   \n",
       "\n",
       "         Outlet_Type  Item_Outlet_Sales  \n",
       "0  Supermarket Type1          3735.1380  \n",
       "1  Supermarket Type2           443.4228  \n",
       "2  Supermarket Type1          2097.2700  \n",
       "3      Grocery Store           732.3800  \n",
       "4  Supermarket Type1           994.7052  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train = pd.read_csv(\"Train.csv\")\n",
    "train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "dc6569d4-760a-4516-bdd3-9ba9aa920631",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 8523 entries, 0 to 8522\n",
      "Data columns (total 12 columns):\n",
      " #   Column                     Non-Null Count  Dtype  \n",
      "---  ------                     --------------  -----  \n",
      " 0   Item_Identifier            8523 non-null   object \n",
      " 1   Item_Weight                7060 non-null   float64\n",
      " 2   Item_Fat_Content           8523 non-null   object \n",
      " 3   Item_Visibility            8523 non-null   float64\n",
      " 4   Item_Type                  8523 non-null   object \n",
      " 5   Item_MRP                   8523 non-null   float64\n",
      " 6   Outlet_Identifier          8523 non-null   object \n",
      " 7   Outlet_Establishment_Year  8523 non-null   int64  \n",
      " 8   Outlet_Size                6113 non-null   object \n",
      " 9   Outlet_Location_Type       8523 non-null   object \n",
      " 10  Outlet_Type                8523 non-null   object \n",
      " 11  Item_Outlet_Sales          8523 non-null   float64\n",
      "dtypes: float64(4), int64(1), object(7)\n",
      "memory usage: 799.2+ KB\n"
     ]
    }
   ],
   "source": [
    "#Checking the columns in Training dataset......\n",
    "train.info()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "b41487b9-dc9a-44c9-a908-71aafeab88a6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(8523, 12)"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Checking the dimensions\n",
    "train.shape\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "efeb1acf-6cb8-463b-b042-598be9e38fac",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Item_Identifier                 0\n",
       "Item_Weight                  1463\n",
       "Item_Fat_Content                0\n",
       "Item_Visibility                 0\n",
       "Item_Type                       0\n",
       "Item_MRP                        0\n",
       "Outlet_Identifier               0\n",
       "Outlet_Establishment_Year       0\n",
       "Outlet_Size                  2410\n",
       "Outlet_Location_Type            0\n",
       "Outlet_Type                     0\n",
       "Item_Outlet_Sales               0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Checking missing values..............\n",
    "train.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "84b52689-6760-4988-afda-9eb642a1913c",
   "metadata": {},
   "outputs": [],
   "source": [
    "train['Item_Weight']=train['Item_Weight'].fillna(train['Item_Weight'].mean())\n",
    "train['Outlet_Size']=train['Outlet_Size'].fillna(train['Outlet_Size'].mode()[0])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "9a926de7-af44-401f-8f6d-6b2148bd3045",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: >"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Lets check whether we still have missing values in our dataset!!\n",
    "import seaborn as sns\n",
    "sns.heatmap(train.isnull(),yticklabels=False,cbar=False,cmap='coolwarm')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "79727abf-6443-4136-b408-e768e2e1fdf6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Item_Identifier</th>\n",
       "      <th>Item_Weight</th>\n",
       "      <th>Item_Fat_Content</th>\n",
       "      <th>Item_Visibility</th>\n",
       "      <th>Item_Type</th>\n",
       "      <th>Item_MRP</th>\n",
       "      <th>Outlet_Identifier</th>\n",
       "      <th>Outlet_Establishment_Year</th>\n",
       "      <th>Outlet_Size</th>\n",
       "      <th>Outlet_Location_Type</th>\n",
       "      <th>Outlet_Type</th>\n",
       "      <th>Item_Outlet_Sales</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>8523</td>\n",
       "      <td>8523.000000</td>\n",
       "      <td>8523</td>\n",
       "      <td>8523.000000</td>\n",
       "      <td>8523</td>\n",
       "      <td>8523.000000</td>\n",
       "      <td>8523</td>\n",
       "      <td>8523.000000</td>\n",
       "      <td>8523</td>\n",
       "      <td>8523</td>\n",
       "      <td>8523</td>\n",
       "      <td>8523.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique</th>\n",
       "      <td>1559</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5</td>\n",
       "      <td>NaN</td>\n",
       "      <td>16</td>\n",
       "      <td>NaN</td>\n",
       "      <td>10</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>top</th>\n",
       "      <td>FDW13</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Low Fat</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Fruits and Vegetables</td>\n",
       "      <td>NaN</td>\n",
       "      <td>OUT027</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Medium</td>\n",
       "      <td>Tier 3</td>\n",
       "      <td>Supermarket Type1</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>freq</th>\n",
       "      <td>10</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5089</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1232</td>\n",
       "      <td>NaN</td>\n",
       "      <td>935</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5203</td>\n",
       "      <td>3350</td>\n",
       "      <td>5577</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>NaN</td>\n",
       "      <td>12.857645</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.066132</td>\n",
       "      <td>NaN</td>\n",
       "      <td>140.992782</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1997.831867</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2181.288914</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>NaN</td>\n",
       "      <td>4.226124</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.051598</td>\n",
       "      <td>NaN</td>\n",
       "      <td>62.275067</td>\n",
       "      <td>NaN</td>\n",
       "      <td>8.371760</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1706.499616</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>NaN</td>\n",
       "      <td>4.555000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>31.290000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1985.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>33.290000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>NaN</td>\n",
       "      <td>9.310000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.026989</td>\n",
       "      <td>NaN</td>\n",
       "      <td>93.826500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1987.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>834.247400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>NaN</td>\n",
       "      <td>12.857645</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.053931</td>\n",
       "      <td>NaN</td>\n",
       "      <td>143.012800</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1999.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1794.331000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>NaN</td>\n",
       "      <td>16.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.094585</td>\n",
       "      <td>NaN</td>\n",
       "      <td>185.643700</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2004.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3101.296400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>NaN</td>\n",
       "      <td>21.350000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.328391</td>\n",
       "      <td>NaN</td>\n",
       "      <td>266.888400</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2009.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>13086.964800</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Item_Identifier  Item_Weight Item_Fat_Content  Item_Visibility  \\\n",
       "count             8523  8523.000000             8523      8523.000000   \n",
       "unique            1559          NaN                5              NaN   \n",
       "top              FDW13          NaN          Low Fat              NaN   \n",
       "freq                10          NaN             5089              NaN   \n",
       "mean               NaN    12.857645              NaN         0.066132   \n",
       "std                NaN     4.226124              NaN         0.051598   \n",
       "min                NaN     4.555000              NaN         0.000000   \n",
       "25%                NaN     9.310000              NaN         0.026989   \n",
       "50%                NaN    12.857645              NaN         0.053931   \n",
       "75%                NaN    16.000000              NaN         0.094585   \n",
       "max                NaN    21.350000              NaN         0.328391   \n",
       "\n",
       "                    Item_Type     Item_MRP Outlet_Identifier  \\\n",
       "count                    8523  8523.000000              8523   \n",
       "unique                     16          NaN                10   \n",
       "top     Fruits and Vegetables          NaN            OUT027   \n",
       "freq                     1232          NaN               935   \n",
       "mean                      NaN   140.992782               NaN   \n",
       "std                       NaN    62.275067               NaN   \n",
       "min                       NaN    31.290000               NaN   \n",
       "25%                       NaN    93.826500               NaN   \n",
       "50%                       NaN   143.012800               NaN   \n",
       "75%                       NaN   185.643700               NaN   \n",
       "max                       NaN   266.888400               NaN   \n",
       "\n",
       "        Outlet_Establishment_Year Outlet_Size Outlet_Location_Type  \\\n",
       "count                 8523.000000        8523                 8523   \n",
       "unique                        NaN           3                    3   \n",
       "top                           NaN      Medium               Tier 3   \n",
       "freq                          NaN        5203                 3350   \n",
       "mean                  1997.831867         NaN                  NaN   \n",
       "std                      8.371760         NaN                  NaN   \n",
       "min                   1985.000000         NaN                  NaN   \n",
       "25%                   1987.000000         NaN                  NaN   \n",
       "50%                   1999.000000         NaN                  NaN   \n",
       "75%                   2004.000000         NaN                  NaN   \n",
       "max                   2009.000000         NaN                  NaN   \n",
       "\n",
       "              Outlet_Type  Item_Outlet_Sales  \n",
       "count                8523        8523.000000  \n",
       "unique                  4                NaN  \n",
       "top     Supermarket Type1                NaN  \n",
       "freq                 5577                NaN  \n",
       "mean                  NaN        2181.288914  \n",
       "std                   NaN        1706.499616  \n",
       "min                   NaN          33.290000  \n",
       "25%                   NaN         834.247400  \n",
       "50%                   NaN        1794.331000  \n",
       "75%                   NaN        3101.296400  \n",
       "max                   NaN       13086.964800  "
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.describe(include = 'all')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "a0e6bef6-9402-460c-b8fb-d87037e87ea0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 8523 entries, 0 to 8522\n",
      "Data columns (total 12 columns):\n",
      " #   Column                     Non-Null Count  Dtype  \n",
      "---  ------                     --------------  -----  \n",
      " 0   Item_Identifier            8523 non-null   object \n",
      " 1   Item_Weight                8523 non-null   float64\n",
      " 2   Item_Fat_Content           8523 non-null   object \n",
      " 3   Item_Visibility            8523 non-null   float64\n",
      " 4   Item_Type                  8523 non-null   object \n",
      " 5   Item_MRP                   8523 non-null   float64\n",
      " 6   Outlet_Identifier          8523 non-null   object \n",
      " 7   Outlet_Establishment_Year  8523 non-null   int64  \n",
      " 8   Outlet_Size                8523 non-null   object \n",
      " 9   Outlet_Location_Type       8523 non-null   object \n",
      " 10  Outlet_Type                8523 non-null   object \n",
      " 11  Item_Outlet_Sales          8523 non-null   float64\n",
      "dtypes: float64(4), int64(1), object(7)\n",
      "memory usage: 799.2+ KB\n"
     ]
    }
   ],
   "source": [
    "train.info()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "6143f97f-18ac-4552-8231-cc508ba40cb1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='Outlet_Identifier'>"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Visualizing the \"Outlet_Identifier\"\n",
    "train['Outlet_Identifier'].value_counts().plot(kind='bar',color = 'Black')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "35bfff8d-1095-42b5-9ac3-a023a2b94916",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Item_Weight</th>\n",
       "      <th>Item_Fat_Content</th>\n",
       "      <th>Item_Visibility</th>\n",
       "      <th>Item_Type</th>\n",
       "      <th>Item_MRP</th>\n",
       "      <th>Outlet_Establishment_Year</th>\n",
       "      <th>Outlet_Size</th>\n",
       "      <th>Outlet_Location_Type</th>\n",
       "      <th>Outlet_Type</th>\n",
       "      <th>Item_Outlet_Sales</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>9.30</td>\n",
       "      <td>Low Fat</td>\n",
       "      <td>0.016047</td>\n",
       "      <td>Dairy</td>\n",
       "      <td>249.8092</td>\n",
       "      <td>1999</td>\n",
       "      <td>Medium</td>\n",
       "      <td>Tier 1</td>\n",
       "      <td>Supermarket Type1</td>\n",
       "      <td>3735.1380</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>5.92</td>\n",
       "      <td>Regular</td>\n",
       "      <td>0.019278</td>\n",
       "      <td>Soft Drinks</td>\n",
       "      <td>48.2692</td>\n",
       "      <td>2009</td>\n",
       "      <td>Medium</td>\n",
       "      <td>Tier 3</td>\n",
       "      <td>Supermarket Type2</td>\n",
       "      <td>443.4228</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>17.50</td>\n",
       "      <td>Low Fat</td>\n",
       "      <td>0.016760</td>\n",
       "      <td>Meat</td>\n",
       "      <td>141.6180</td>\n",
       "      <td>1999</td>\n",
       "      <td>Medium</td>\n",
       "      <td>Tier 1</td>\n",
       "      <td>Supermarket Type1</td>\n",
       "      <td>2097.2700</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>19.20</td>\n",
       "      <td>Regular</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>Fruits and Vegetables</td>\n",
       "      <td>182.0950</td>\n",
       "      <td>1998</td>\n",
       "      <td>Medium</td>\n",
       "      <td>Tier 3</td>\n",
       "      <td>Grocery Store</td>\n",
       "      <td>732.3800</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>8.93</td>\n",
       "      <td>Low Fat</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>Household</td>\n",
       "      <td>53.8614</td>\n",
       "      <td>1987</td>\n",
       "      <td>High</td>\n",
       "      <td>Tier 3</td>\n",
       "      <td>Supermarket Type1</td>\n",
       "      <td>994.7052</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Item_Weight Item_Fat_Content  Item_Visibility              Item_Type  \\\n",
       "0         9.30          Low Fat         0.016047                  Dairy   \n",
       "1         5.92          Regular         0.019278            Soft Drinks   \n",
       "2        17.50          Low Fat         0.016760                   Meat   \n",
       "3        19.20          Regular         0.000000  Fruits and Vegetables   \n",
       "4         8.93          Low Fat         0.000000              Household   \n",
       "\n",
       "   Item_MRP  Outlet_Establishment_Year Outlet_Size Outlet_Location_Type  \\\n",
       "0  249.8092                       1999      Medium               Tier 1   \n",
       "1   48.2692                       2009      Medium               Tier 3   \n",
       "2  141.6180                       1999      Medium               Tier 1   \n",
       "3  182.0950                       1998      Medium               Tier 3   \n",
       "4   53.8614                       1987        High               Tier 3   \n",
       "\n",
       "         Outlet_Type  Item_Outlet_Sales  \n",
       "0  Supermarket Type1          3735.1380  \n",
       "1  Supermarket Type2           443.4228  \n",
       "2  Supermarket Type1          2097.2700  \n",
       "3      Grocery Store           732.3800  \n",
       "4  Supermarket Type1           994.7052  "
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train =train.drop(['Item_Identifier','Outlet_Identifier'],axis=1)\n",
    "train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "9d5ad2ae-65ea-4403-bc9c-56668a2b0ecb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='Item_Fat_Content'>"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Visualizing the \"Item_Fat_Content\"\n",
    "train['Item_Fat_Content'].value_counts().plot(kind='bar',color = 'black')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "822dd1f8-b410-441c-9c9d-75b4a6608c1d",
   "metadata": {},
   "outputs": [],
   "source": [
    "train =  train.replace(to_replace =\"low fat\",  value =\"Low Fat\") \n",
    "train =  train.replace(to_replace =\"LF\",  value =\"Low Fat\") \n",
    "train =  train.replace(to_replace =\"reg\",  value =\"Regular\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "bff20d6f-0910-409e-a4da-78f2fdff38d4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='Item_Fat_Content'>"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Visualizing the \"Item_Fat_Content\"\n",
    "train['Item_Fat_Content'].value_counts().plot(kind='bar',color = 'blue')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "f36aeadb-d41a-46d3-9d2a-80054cffaf2f",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\dell\\AppData\\Local\\Temp\\ipykernel_19240\\2266276777.py:3: UserWarning: \n",
      "\n",
      "`distplot` is a deprecated function and will be removed in seaborn v0.14.0.\n",
      "\n",
      "Please adapt your code to use either `displot` (a figure-level function with\n",
      "similar flexibility) or `histplot` (an axes-level function for histograms).\n",
      "\n",
      "For a guide to updating your code to use the new functions, please see\n",
      "https://gist.github.com/mwaskom/de44147ed2974457ad6372750bbe5751\n",
      "\n",
      "  sns.distplot(y, kde=True,color = 'blue')\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='Item_Weight', ylabel='Density'>"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "y = train['Item_Weight']\n",
    "plt.figure(1); \n",
    "sns.distplot(y, kde=True,color = 'blue')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "6d361327-c4c8-42aa-ac69-7a475b87e43e",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\dell\\AppData\\Local\\Temp\\ipykernel_19240\\246062326.py:3: UserWarning: \n",
      "\n",
      "`distplot` is a deprecated function and will be removed in seaborn v0.14.0.\n",
      "\n",
      "Please adapt your code to use either `displot` (a figure-level function with\n",
      "similar flexibility) or `histplot` (an axes-level function for histograms).\n",
      "\n",
      "For a guide to updating your code to use the new functions, please see\n",
      "https://gist.github.com/mwaskom/de44147ed2974457ad6372750bbe5751\n",
      "\n",
      "  sns.distplot(y, kde=True,color = 'red')\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='Item_Visibility', ylabel='Density'>"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "y = train['Item_Visibility']\n",
    "plt.figure(1); \n",
    "sns.distplot(y, kde=True,color = 'red')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "89024327-b50b-40b4-84c5-6c3611beb7a9",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\dell\\AppData\\Local\\Temp\\ipykernel_19240\\2731969954.py:3: UserWarning: \n",
      "\n",
      "`distplot` is a deprecated function and will be removed in seaborn v0.14.0.\n",
      "\n",
      "Please adapt your code to use either `displot` (a figure-level function with\n",
      "similar flexibility) or `histplot` (an axes-level function for histograms).\n",
      "\n",
      "For a guide to updating your code to use the new functions, please see\n",
      "https://gist.github.com/mwaskom/de44147ed2974457ad6372750bbe5751\n",
      "\n",
      "  sns.distplot(y, kde=True,color = 'red')\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='Item_MRP', ylabel='Density'>"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "y =train['Item_MRP']\n",
    "plt.figure(1);\n",
    "sns.distplot(y, kde=True,color = 'red')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "4037e915-9193-4334-8638-05b5b3471612",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Item_Weight</th>\n",
       "      <th>Item_Fat_Content</th>\n",
       "      <th>Item_Visibility</th>\n",
       "      <th>Item_Type</th>\n",
       "      <th>Item_MRP</th>\n",
       "      <th>Outlet_Establishment_Year</th>\n",
       "      <th>Outlet_Size</th>\n",
       "      <th>Outlet_Location_Type</th>\n",
       "      <th>Outlet_Type</th>\n",
       "      <th>Item_Outlet_Sales</th>\n",
       "      <th>Qty_Sold</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>9.30</td>\n",
       "      <td>Low Fat</td>\n",
       "      <td>0.016047</td>\n",
       "      <td>Dairy</td>\n",
       "      <td>249.8092</td>\n",
       "      <td>1999</td>\n",
       "      <td>Medium</td>\n",
       "      <td>Tier 1</td>\n",
       "      <td>Supermarket Type1</td>\n",
       "      <td>3735.1380</td>\n",
       "      <td>14.951963</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>5.92</td>\n",
       "      <td>Regular</td>\n",
       "      <td>0.019278</td>\n",
       "      <td>Soft Drinks</td>\n",
       "      <td>48.2692</td>\n",
       "      <td>2009</td>\n",
       "      <td>Medium</td>\n",
       "      <td>Tier 3</td>\n",
       "      <td>Supermarket Type2</td>\n",
       "      <td>443.4228</td>\n",
       "      <td>9.186454</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>17.50</td>\n",
       "      <td>Low Fat</td>\n",
       "      <td>0.016760</td>\n",
       "      <td>Meat</td>\n",
       "      <td>141.6180</td>\n",
       "      <td>1999</td>\n",
       "      <td>Medium</td>\n",
       "      <td>Tier 1</td>\n",
       "      <td>Supermarket Type1</td>\n",
       "      <td>2097.2700</td>\n",
       "      <td>14.809346</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>19.20</td>\n",
       "      <td>Regular</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>Fruits and Vegetables</td>\n",
       "      <td>182.0950</td>\n",
       "      <td>1998</td>\n",
       "      <td>Medium</td>\n",
       "      <td>Tier 3</td>\n",
       "      <td>Grocery Store</td>\n",
       "      <td>732.3800</td>\n",
       "      <td>4.021967</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>8.93</td>\n",
       "      <td>Low Fat</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>Household</td>\n",
       "      <td>53.8614</td>\n",
       "      <td>1987</td>\n",
       "      <td>High</td>\n",
       "      <td>Tier 3</td>\n",
       "      <td>Supermarket Type1</td>\n",
       "      <td>994.7052</td>\n",
       "      <td>18.467868</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Item_Weight Item_Fat_Content  Item_Visibility              Item_Type  \\\n",
       "0         9.30          Low Fat         0.016047                  Dairy   \n",
       "1         5.92          Regular         0.019278            Soft Drinks   \n",
       "2        17.50          Low Fat         0.016760                   Meat   \n",
       "3        19.20          Regular         0.000000  Fruits and Vegetables   \n",
       "4         8.93          Low Fat         0.000000              Household   \n",
       "\n",
       "   Item_MRP  Outlet_Establishment_Year Outlet_Size Outlet_Location_Type  \\\n",
       "0  249.8092                       1999      Medium               Tier 1   \n",
       "1   48.2692                       2009      Medium               Tier 3   \n",
       "2  141.6180                       1999      Medium               Tier 1   \n",
       "3  182.0950                       1998      Medium               Tier 3   \n",
       "4   53.8614                       1987        High               Tier 3   \n",
       "\n",
       "         Outlet_Type  Item_Outlet_Sales   Qty_Sold  \n",
       "0  Supermarket Type1          3735.1380  14.951963  \n",
       "1  Supermarket Type2           443.4228   9.186454  \n",
       "2  Supermarket Type1          2097.2700  14.809346  \n",
       "3      Grocery Store           732.3800   4.021967  \n",
       "4  Supermarket Type1           994.7052  18.467868  "
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train[\"Qty_Sold\"] = (train[\"Item_Outlet_Sales\"]/train[\"Item_MRP\"])\n",
    "train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "d9047729-c0e3-4a1d-866e-228536525e3a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Item_Fat_Content',\n",
       " 'Item_Type',\n",
       " 'Outlet_Size',\n",
       " 'Outlet_Location_Type',\n",
       " 'Outlet_Type']"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "categorical_columns=[x for x in train.dtypes.index if train.dtypes[x]=='object']\n",
    "categorical_columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c97cb8cd-ea9b-43bf-a745-9e6c16a2da99",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5ed44523-5802-4cad-be6d-67e275d7af4a",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "2f758124-01fc-4510-afa5-290caee32277",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Item_Weight</th>\n",
       "      <th>Item_Fat_Content</th>\n",
       "      <th>Item_Visibility</th>\n",
       "      <th>Item_Type</th>\n",
       "      <th>Item_MRP</th>\n",
       "      <th>Outlet_Establishment_Year</th>\n",
       "      <th>Outlet_Size</th>\n",
       "      <th>Outlet_Location_Type</th>\n",
       "      <th>Outlet_Type</th>\n",
       "      <th>Item_Outlet_Sales</th>\n",
       "      <th>Qty_Sold</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>9.30</td>\n",
       "      <td>Low Fat</td>\n",
       "      <td>0.016047</td>\n",
       "      <td>Dairy</td>\n",
       "      <td>249.8092</td>\n",
       "      <td>1999</td>\n",
       "      <td>Medium</td>\n",
       "      <td>Tier 1</td>\n",
       "      <td>Supermarket Type1</td>\n",
       "      <td>3735.1380</td>\n",
       "      <td>14.951963</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>5.92</td>\n",
       "      <td>Regular</td>\n",
       "      <td>0.019278</td>\n",
       "      <td>Soft Drinks</td>\n",
       "      <td>48.2692</td>\n",
       "      <td>2009</td>\n",
       "      <td>Medium</td>\n",
       "      <td>Tier 3</td>\n",
       "      <td>Supermarket Type2</td>\n",
       "      <td>443.4228</td>\n",
       "      <td>9.186454</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>17.50</td>\n",
       "      <td>Low Fat</td>\n",
       "      <td>0.016760</td>\n",
       "      <td>Meat</td>\n",
       "      <td>141.6180</td>\n",
       "      <td>1999</td>\n",
       "      <td>Medium</td>\n",
       "      <td>Tier 1</td>\n",
       "      <td>Supermarket Type1</td>\n",
       "      <td>2097.2700</td>\n",
       "      <td>14.809346</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>19.20</td>\n",
       "      <td>Regular</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>Fruits and Vegetables</td>\n",
       "      <td>182.0950</td>\n",
       "      <td>1998</td>\n",
       "      <td>Medium</td>\n",
       "      <td>Tier 3</td>\n",
       "      <td>Grocery Store</td>\n",
       "      <td>732.3800</td>\n",
       "      <td>4.021967</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>8.93</td>\n",
       "      <td>Low Fat</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>Household</td>\n",
       "      <td>53.8614</td>\n",
       "      <td>1987</td>\n",
       "      <td>High</td>\n",
       "      <td>Tier 3</td>\n",
       "      <td>Supermarket Type1</td>\n",
       "      <td>994.7052</td>\n",
       "      <td>18.467868</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Item_Weight Item_Fat_Content  Item_Visibility              Item_Type  \\\n",
       "0         9.30          Low Fat         0.016047                  Dairy   \n",
       "1         5.92          Regular         0.019278            Soft Drinks   \n",
       "2        17.50          Low Fat         0.016760                   Meat   \n",
       "3        19.20          Regular         0.000000  Fruits and Vegetables   \n",
       "4         8.93          Low Fat         0.000000              Household   \n",
       "\n",
       "   Item_MRP  Outlet_Establishment_Year Outlet_Size Outlet_Location_Type  \\\n",
       "0  249.8092                       1999      Medium               Tier 1   \n",
       "1   48.2692                       2009      Medium               Tier 3   \n",
       "2  141.6180                       1999      Medium               Tier 1   \n",
       "3  182.0950                       1998      Medium               Tier 3   \n",
       "4   53.8614                       1987        High               Tier 3   \n",
       "\n",
       "         Outlet_Type  Item_Outlet_Sales   Qty_Sold  \n",
       "0  Supermarket Type1          3735.1380  14.951963  \n",
       "1  Supermarket Type2           443.4228   9.186454  \n",
       "2  Supermarket Type1          2097.2700  14.809346  \n",
       "3      Grocery Store           732.3800   4.021967  \n",
       "4  Supermarket Type1           994.7052  18.467868  "
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f9da3fb7-1fcd-4131-b745-b792593c88c4",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "fdef83c9-1b69-442b-bde7-d7ebc13e0124",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(8523, 34)\n"
     ]
    }
   ],
   "source": [
    "#Now one hot encoding\n",
    "train= pd.get_dummies(train, columns = categorical_columns, drop_first = False)\n",
    "\n",
    "\n",
    "print(train.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "8c5d5545-540f-4599-862a-91bb379f10d3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Item_Weight</th>\n",
       "      <th>Item_Visibility</th>\n",
       "      <th>Item_MRP</th>\n",
       "      <th>Outlet_Establishment_Year</th>\n",
       "      <th>Item_Outlet_Sales</th>\n",
       "      <th>Qty_Sold</th>\n",
       "      <th>Item_Fat_Content_Low Fat</th>\n",
       "      <th>Item_Fat_Content_Regular</th>\n",
       "      <th>Item_Type_Baking Goods</th>\n",
       "      <th>Item_Type_Breads</th>\n",
       "      <th>...</th>\n",
       "      <th>Outlet_Size_High</th>\n",
       "      <th>Outlet_Size_Medium</th>\n",
       "      <th>Outlet_Size_Small</th>\n",
       "      <th>Outlet_Location_Type_Tier 1</th>\n",
       "      <th>Outlet_Location_Type_Tier 2</th>\n",
       "      <th>Outlet_Location_Type_Tier 3</th>\n",
       "      <th>Outlet_Type_Grocery Store</th>\n",
       "      <th>Outlet_Type_Supermarket Type1</th>\n",
       "      <th>Outlet_Type_Supermarket Type2</th>\n",
       "      <th>Outlet_Type_Supermarket Type3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>9.30</td>\n",
       "      <td>0.016047</td>\n",
       "      <td>249.8092</td>\n",
       "      <td>1999</td>\n",
       "      <td>3735.1380</td>\n",
       "      <td>14.951963</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>5.92</td>\n",
       "      <td>0.019278</td>\n",
       "      <td>48.2692</td>\n",
       "      <td>2009</td>\n",
       "      <td>443.4228</td>\n",
       "      <td>9.186454</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>17.50</td>\n",
       "      <td>0.016760</td>\n",
       "      <td>141.6180</td>\n",
       "      <td>1999</td>\n",
       "      <td>2097.2700</td>\n",
       "      <td>14.809346</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>19.20</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>182.0950</td>\n",
       "      <td>1998</td>\n",
       "      <td>732.3800</td>\n",
       "      <td>4.021967</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>8.93</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>53.8614</td>\n",
       "      <td>1987</td>\n",
       "      <td>994.7052</td>\n",
       "      <td>18.467868</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 34 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   Item_Weight  Item_Visibility  Item_MRP  Outlet_Establishment_Year  \\\n",
       "0         9.30         0.016047  249.8092                       1999   \n",
       "1         5.92         0.019278   48.2692                       2009   \n",
       "2        17.50         0.016760  141.6180                       1999   \n",
       "3        19.20         0.000000  182.0950                       1998   \n",
       "4         8.93         0.000000   53.8614                       1987   \n",
       "\n",
       "   Item_Outlet_Sales   Qty_Sold  Item_Fat_Content_Low Fat  \\\n",
       "0          3735.1380  14.951963                      True   \n",
       "1           443.4228   9.186454                     False   \n",
       "2          2097.2700  14.809346                      True   \n",
       "3           732.3800   4.021967                     False   \n",
       "4           994.7052  18.467868                      True   \n",
       "\n",
       "   Item_Fat_Content_Regular  Item_Type_Baking Goods  Item_Type_Breads  ...  \\\n",
       "0                     False                   False             False  ...   \n",
       "1                      True                   False             False  ...   \n",
       "2                     False                   False             False  ...   \n",
       "3                      True                   False             False  ...   \n",
       "4                     False                   False             False  ...   \n",
       "\n",
       "   Outlet_Size_High  Outlet_Size_Medium  Outlet_Size_Small  \\\n",
       "0             False                True              False   \n",
       "1             False                True              False   \n",
       "2             False                True              False   \n",
       "3             False                True              False   \n",
       "4              True               False              False   \n",
       "\n",
       "   Outlet_Location_Type_Tier 1  Outlet_Location_Type_Tier 2  \\\n",
       "0                         True                        False   \n",
       "1                        False                        False   \n",
       "2                         True                        False   \n",
       "3                        False                        False   \n",
       "4                        False                        False   \n",
       "\n",
       "   Outlet_Location_Type_Tier 3  Outlet_Type_Grocery Store  \\\n",
       "0                        False                      False   \n",
       "1                         True                      False   \n",
       "2                        False                      False   \n",
       "3                         True                       True   \n",
       "4                         True                      False   \n",
       "\n",
       "   Outlet_Type_Supermarket Type1  Outlet_Type_Supermarket Type2  \\\n",
       "0                           True                          False   \n",
       "1                          False                           True   \n",
       "2                           True                          False   \n",
       "3                          False                          False   \n",
       "4                           True                          False   \n",
       "\n",
       "   Outlet_Type_Supermarket Type3  \n",
       "0                          False  \n",
       "1                          False  \n",
       "2                          False  \n",
       "3                          False  \n",
       "4                          False  \n",
       "\n",
       "[5 rows x 34 columns]"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "3b51880e-8d77-4ec5-94bb-3aea0b19edf0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Item_Fat_Content_Low Fat',\n",
       " 'Item_Fat_Content_Regular',\n",
       " 'Item_Type_Baking Goods',\n",
       " 'Item_Type_Breads',\n",
       " 'Item_Type_Breakfast',\n",
       " 'Item_Type_Canned',\n",
       " 'Item_Type_Dairy',\n",
       " 'Item_Type_Frozen Foods',\n",
       " 'Item_Type_Fruits and Vegetables',\n",
       " 'Item_Type_Hard Drinks',\n",
       " 'Item_Type_Health and Hygiene',\n",
       " 'Item_Type_Household',\n",
       " 'Item_Type_Meat',\n",
       " 'Item_Type_Others',\n",
       " 'Item_Type_Seafood',\n",
       " 'Item_Type_Snack Foods',\n",
       " 'Item_Type_Soft Drinks',\n",
       " 'Item_Type_Starchy Foods',\n",
       " 'Outlet_Size_High',\n",
       " 'Outlet_Size_Medium',\n",
       " 'Outlet_Size_Small',\n",
       " 'Outlet_Location_Type_Tier 1',\n",
       " 'Outlet_Location_Type_Tier 2',\n",
       " 'Outlet_Location_Type_Tier 3',\n",
       " 'Outlet_Type_Grocery Store',\n",
       " 'Outlet_Type_Supermarket Type1',\n",
       " 'Outlet_Type_Supermarket Type2',\n",
       " 'Outlet_Type_Supermarket Type3']"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "categorical_columns=[x for x in train.dtypes.index if train.dtypes[x]=='bool']\n",
    "categorical_columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "4a6d4a92-aa6a-4316-8028-e6786028b64e",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Encoding Categorical Variables\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "labelencoder=LabelEncoder()\n",
    "for col in train.columns:\n",
    "    train[col] = labelencoder.fit_transform(train[col])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "38917274-11dc-4d25-bcc1-51d71856d7b9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Item_Weight</th>\n",
       "      <th>Item_Visibility</th>\n",
       "      <th>Item_MRP</th>\n",
       "      <th>Outlet_Establishment_Year</th>\n",
       "      <th>Item_Outlet_Sales</th>\n",
       "      <th>Qty_Sold</th>\n",
       "      <th>Item_Fat_Content_Low Fat</th>\n",
       "      <th>Item_Fat_Content_Regular</th>\n",
       "      <th>Item_Type_Baking Goods</th>\n",
       "      <th>Item_Type_Breads</th>\n",
       "      <th>...</th>\n",
       "      <th>Outlet_Size_High</th>\n",
       "      <th>Outlet_Size_Medium</th>\n",
       "      <th>Outlet_Size_Small</th>\n",
       "      <th>Outlet_Location_Type_Tier 1</th>\n",
       "      <th>Outlet_Location_Type_Tier 2</th>\n",
       "      <th>Outlet_Location_Type_Tier 3</th>\n",
       "      <th>Outlet_Type_Grocery Store</th>\n",
       "      <th>Outlet_Type_Supermarket Type1</th>\n",
       "      <th>Outlet_Type_Supermarket Type2</th>\n",
       "      <th>Outlet_Type_Supermarket Type3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>284</td>\n",
       "      <td>664</td>\n",
       "      <td>5592</td>\n",
       "      <td>4</td>\n",
       "      <td>2540</td>\n",
       "      <td>4084</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>57</td>\n",
       "      <td>880</td>\n",
       "      <td>473</td>\n",
       "      <td>8</td>\n",
       "      <td>422</td>\n",
       "      <td>2217</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>376</td>\n",
       "      <td>715</td>\n",
       "      <td>2901</td>\n",
       "      <td>4</td>\n",
       "      <td>1639</td>\n",
       "      <td>3972</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>393</td>\n",
       "      <td>0</td>\n",
       "      <td>4227</td>\n",
       "      <td>3</td>\n",
       "      <td>670</td>\n",
       "      <td>1119</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>265</td>\n",
       "      <td>0</td>\n",
       "      <td>627</td>\n",
       "      <td>1</td>\n",
       "      <td>865</td>\n",
       "      <td>5315</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 34 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   Item_Weight  Item_Visibility  Item_MRP  Outlet_Establishment_Year  \\\n",
       "0          284              664      5592                          4   \n",
       "1           57              880       473                          8   \n",
       "2          376              715      2901                          4   \n",
       "3          393                0      4227                          3   \n",
       "4          265                0       627                          1   \n",
       "\n",
       "   Item_Outlet_Sales  Qty_Sold  Item_Fat_Content_Low Fat  \\\n",
       "0               2540      4084                         1   \n",
       "1                422      2217                         0   \n",
       "2               1639      3972                         1   \n",
       "3                670      1119                         0   \n",
       "4                865      5315                         1   \n",
       "\n",
       "   Item_Fat_Content_Regular  Item_Type_Baking Goods  Item_Type_Breads  ...  \\\n",
       "0                         0                       0                 0  ...   \n",
       "1                         1                       0                 0  ...   \n",
       "2                         0                       0                 0  ...   \n",
       "3                         1                       0                 0  ...   \n",
       "4                         0                       0                 0  ...   \n",
       "\n",
       "   Outlet_Size_High  Outlet_Size_Medium  Outlet_Size_Small  \\\n",
       "0                 0                   1                  0   \n",
       "1                 0                   1                  0   \n",
       "2                 0                   1                  0   \n",
       "3                 0                   1                  0   \n",
       "4                 1                   0                  0   \n",
       "\n",
       "   Outlet_Location_Type_Tier 1  Outlet_Location_Type_Tier 2  \\\n",
       "0                            1                            0   \n",
       "1                            0                            0   \n",
       "2                            1                            0   \n",
       "3                            0                            0   \n",
       "4                            0                            0   \n",
       "\n",
       "   Outlet_Location_Type_Tier 3  Outlet_Type_Grocery Store  \\\n",
       "0                            0                          0   \n",
       "1                            1                          0   \n",
       "2                            0                          0   \n",
       "3                            1                          1   \n",
       "4                            1                          0   \n",
       "\n",
       "   Outlet_Type_Supermarket Type1  Outlet_Type_Supermarket Type2  \\\n",
       "0                              1                              0   \n",
       "1                              0                              1   \n",
       "2                              1                              0   \n",
       "3                              0                              0   \n",
       "4                              1                              0   \n",
       "\n",
       "   Outlet_Type_Supermarket Type3  \n",
       "0                              0  \n",
       "1                              0  \n",
       "2                              0  \n",
       "3                              0  \n",
       "4                              0  \n",
       "\n",
       "[5 rows x 34 columns]"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "aa57fd7e-d5fd-43bf-903d-5a78b808c2b2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Item_Weight</th>\n",
       "      <th>Item_Visibility</th>\n",
       "      <th>Item_MRP</th>\n",
       "      <th>Outlet_Establishment_Year</th>\n",
       "      <th>Item_Outlet_Sales</th>\n",
       "      <th>Qty_Sold</th>\n",
       "      <th>Item_Fat_Content_Low Fat</th>\n",
       "      <th>Item_Fat_Content_Regular</th>\n",
       "      <th>Item_Type_Baking Goods</th>\n",
       "      <th>Item_Type_Breads</th>\n",
       "      <th>...</th>\n",
       "      <th>Outlet_Size_High</th>\n",
       "      <th>Outlet_Size_Medium</th>\n",
       "      <th>Outlet_Size_Small</th>\n",
       "      <th>Outlet_Location_Type_Tier 1</th>\n",
       "      <th>Outlet_Location_Type_Tier 2</th>\n",
       "      <th>Outlet_Location_Type_Tier 3</th>\n",
       "      <th>Outlet_Type_Grocery Store</th>\n",
       "      <th>Outlet_Type_Supermarket Type1</th>\n",
       "      <th>Outlet_Type_Supermarket Type2</th>\n",
       "      <th>Outlet_Type_Supermarket Type3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>284</td>\n",
       "      <td>664</td>\n",
       "      <td>5592</td>\n",
       "      <td>4</td>\n",
       "      <td>2540</td>\n",
       "      <td>4084</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>57</td>\n",
       "      <td>880</td>\n",
       "      <td>473</td>\n",
       "      <td>8</td>\n",
       "      <td>422</td>\n",
       "      <td>2217</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>376</td>\n",
       "      <td>715</td>\n",
       "      <td>2901</td>\n",
       "      <td>4</td>\n",
       "      <td>1639</td>\n",
       "      <td>3972</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>393</td>\n",
       "      <td>0</td>\n",
       "      <td>4227</td>\n",
       "      <td>3</td>\n",
       "      <td>670</td>\n",
       "      <td>1119</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>265</td>\n",
       "      <td>0</td>\n",
       "      <td>627</td>\n",
       "      <td>1</td>\n",
       "      <td>865</td>\n",
       "      <td>5315</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 34 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   Item_Weight  Item_Visibility  Item_MRP  Outlet_Establishment_Year  \\\n",
       "0          284              664      5592                          4   \n",
       "1           57              880       473                          8   \n",
       "2          376              715      2901                          4   \n",
       "3          393                0      4227                          3   \n",
       "4          265                0       627                          1   \n",
       "\n",
       "   Item_Outlet_Sales  Qty_Sold  Item_Fat_Content_Low Fat  \\\n",
       "0               2540      4084                         1   \n",
       "1                422      2217                         0   \n",
       "2               1639      3972                         1   \n",
       "3                670      1119                         0   \n",
       "4                865      5315                         1   \n",
       "\n",
       "   Item_Fat_Content_Regular  Item_Type_Baking Goods  Item_Type_Breads  ...  \\\n",
       "0                         0                       0                 0  ...   \n",
       "1                         1                       0                 0  ...   \n",
       "2                         0                       0                 0  ...   \n",
       "3                         1                       0                 0  ...   \n",
       "4                         0                       0                 0  ...   \n",
       "\n",
       "   Outlet_Size_High  Outlet_Size_Medium  Outlet_Size_Small  \\\n",
       "0                 0                   1                  0   \n",
       "1                 0                   1                  0   \n",
       "2                 0                   1                  0   \n",
       "3                 0                   1                  0   \n",
       "4                 1                   0                  0   \n",
       "\n",
       "   Outlet_Location_Type_Tier 1  Outlet_Location_Type_Tier 2  \\\n",
       "0                            1                            0   \n",
       "1                            0                            0   \n",
       "2                            1                            0   \n",
       "3                            0                            0   \n",
       "4                            0                            0   \n",
       "\n",
       "   Outlet_Location_Type_Tier 3  Outlet_Type_Grocery Store  \\\n",
       "0                            0                          0   \n",
       "1                            1                          0   \n",
       "2                            0                          0   \n",
       "3                            1                          1   \n",
       "4                            1                          0   \n",
       "\n",
       "   Outlet_Type_Supermarket Type1  Outlet_Type_Supermarket Type2  \\\n",
       "0                              1                              0   \n",
       "1                              0                              1   \n",
       "2                              1                              0   \n",
       "3                              0                              0   \n",
       "4                              1                              0   \n",
       "\n",
       "   Outlet_Type_Supermarket Type3  \n",
       "0                              0  \n",
       "1                              0  \n",
       "2                              0  \n",
       "3                              0  \n",
       "4                              0  \n",
       "\n",
       "[5 rows x 34 columns]"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = train[['Item_Weight', 'Item_Visibility', 'Item_MRP',\n",
    "       'Outlet_Establishment_Year', 'Item_Outlet_Sales', 'Qty_Sold',\n",
    "       'Item_Fat_Content_Low Fat', 'Item_Fat_Content_Regular',\n",
    "       'Item_Type_Baking Goods', 'Item_Type_Breads', 'Item_Type_Breakfast',\n",
    "       'Item_Type_Canned', 'Item_Type_Dairy', 'Item_Type_Frozen Foods',\n",
    "       'Item_Type_Fruits and Vegetables', 'Item_Type_Hard Drinks',\n",
    "       'Item_Type_Health and Hygiene', 'Item_Type_Household', 'Item_Type_Meat',\n",
    "       'Item_Type_Others', 'Item_Type_Seafood', 'Item_Type_Snack Foods',\n",
    "       'Item_Type_Soft Drinks', 'Item_Type_Starchy Foods', 'Outlet_Size_High',\n",
    "       'Outlet_Size_Medium', 'Outlet_Size_Small',\n",
    "       'Outlet_Location_Type_Tier 1', 'Outlet_Location_Type_Tier 2',\n",
    "       'Outlet_Location_Type_Tier 3', 'Outlet_Type_Grocery Store',\n",
    "       'Outlet_Type_Supermarket Type1', 'Outlet_Type_Supermarket Type2',\n",
    "       'Outlet_Type_Supermarket Type3']]\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "ef2335f6-e910-4e0b-94a1-5791c4359324",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Item_Weight\n",
      "Item_Visibility\n",
      "Item_MRP\n",
      "Outlet_Establishment_Year\n",
      "Item_Outlet_Sales\n",
      "Qty_Sold\n",
      "Item_Fat_Content_Low Fat\n",
      "Item_Fat_Content_Regular\n",
      "Item_Type_Baking Goods\n",
      "Item_Type_Breads\n",
      "Item_Type_Breakfast\n",
      "Item_Type_Canned\n",
      "Item_Type_Dairy\n",
      "Item_Type_Frozen Foods\n",
      "Item_Type_Fruits and Vegetables\n",
      "Item_Type_Hard Drinks\n",
      "Item_Type_Health and Hygiene\n",
      "Item_Type_Household\n",
      "Item_Type_Meat\n",
      "Item_Type_Others\n",
      "Item_Type_Seafood\n",
      "Item_Type_Snack Foods\n",
      "Item_Type_Soft Drinks\n",
      "Item_Type_Starchy Foods\n",
      "Outlet_Size_High\n",
      "Outlet_Size_Medium\n",
      "Outlet_Size_Small\n",
      "Outlet_Location_Type_Tier 1\n",
      "Outlet_Location_Type_Tier 2\n",
      "Outlet_Location_Type_Tier 3\n",
      "Outlet_Type_Grocery Store\n",
      "Outlet_Type_Supermarket Type1\n",
      "Outlet_Type_Supermarket Type2\n",
      "Outlet_Type_Supermarket Type3\n"
     ]
    }
   ],
   "source": [
    "# iterating the columns \n",
    "for col in df.columns: \n",
    "    print(col)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "3e23e9ef-4c96-44ee-99f3-31f5240a42b6",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Separating features and label\n",
    "X = df.iloc[:,0:33].values\n",
    "y = df.iloc[:,-1].values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "fc381d30-d635-46d6-9c24-8e4c1f2623dc",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2,random_state=4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "6ba80daf-af02-4004-b231-221354b3255e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[4.47375476e-01 3.45684545e-01 2.03075250e-01 3.25213143e-03\n",
      " 6.11914880e-04 4.99706426e-07 4.18594689e-08 3.15793978e-08\n",
      " 1.80013862e-08 1.59488883e-08 1.10554151e-08 9.48486301e-09\n",
      " 8.14282023e-09 6.54821384e-09 6.08038008e-09 5.24625659e-09\n",
      " 5.09722754e-09 4.06996502e-09 3.61895061e-09 3.22308443e-09\n",
      " 2.91372396e-09 2.11365546e-09 1.71492531e-09 1.42236535e-09\n",
      " 1.23407545e-09 1.00921249e-09 8.83333242e-10 5.64680281e-10\n",
      " 1.53937562e-10 3.84822267e-33 3.84822267e-33 3.84822267e-33\n",
      " 3.84822267e-33]\n"
     ]
    }
   ],
   "source": [
    "# Applying PCA\n",
    "from sklearn.decomposition import PCA\n",
    "pca = PCA(n_components = None)\n",
    "X_train = pca.fit_transform(X_train)\n",
    "X_test = pca.transform(X_test)\n",
    "explained_variance = pca.explained_variance_ratio_\n",
    "\n",
    "print(explained_variance)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "eec5b845-eb4e-4bc5-abd8-a7f67c8c14dd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "33"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(explained_variance)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "863f6ad2-3505-4646-a137-5547cde11183",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Sorted List returned :\n",
      "[0.4473754763916198, 0.3456845453798317, 0.20307525024403086, 0.0032521314321587733, 0.0006119148797059575, 4.997064260932529e-07, 4.185946893920194e-08, 3.157939784945826e-08, 1.8001386151418386e-08, 1.5948888323178628e-08, 1.1055415078173118e-08, 9.484863009794468e-09, 8.142820233281805e-09, 6.548213837902448e-09, 6.08038008433943e-09, 5.2462565886013695e-09, 5.097227537368787e-09, 4.069965017604882e-09, 3.618950605032084e-09, 3.223084427363804e-09, 2.913723964486523e-09, 2.1136554563977512e-09, 1.7149253134131358e-09, 1.4223653453421913e-09, 1.2340754476228071e-09, 1.0092124909362677e-09, 8.833332416806171e-10, 5.646802806688229e-10, 1.5393756187152302e-10, 3.84822267022545e-33, 3.8482226702254476e-33, 3.8482226702254476e-33, 3.8482226702254476e-33]\n"
     ]
    }
   ],
   "source": [
    "print(\"Sorted List returned :\")\n",
    "print(sorted(explained_variance,reverse = True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "810bdd71-7e84-4391-9dbc-89f573382792",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1600x800 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "with plt.style.context('dark_background'):\n",
    "    plt.figure(figsize=(16, 8))\n",
    "    \n",
    "    plt.bar(range(33), explained_variance, alpha=0.5, align='center',label='individual explained variance')\n",
    "    plt.ylabel('Explained variance ratio')\n",
    "    plt.xlabel('Principal components')\n",
    "    plt.legend(loc='best')\n",
    "    plt.tight_layout()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "f297d5a4-2d88-4318-8e93-0a598c9f1118",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.44737548 0.34568455 0.20307525]\n"
     ]
    }
   ],
   "source": [
    "# Applying PCA\n",
    "from sklearn.decomposition import PCA\n",
    "pca = PCA(n_components = 3)\n",
    "X_train = pca.fit_transform(X_train)\n",
    "X_test = pca.transform(X_test)\n",
    "explained_variance = pca.explained_variance_ratio_\n",
    "print(explained_variance)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "621cd723-6ee9-4059-bbfb-70d83f637681",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Model comparison\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "from sklearn.tree import DecisionTreeRegressor\n",
    "from sklearn.model_selection import cross_val_predict\n",
    "from sklearn.model_selection import cross_val_score\n",
    "from sklearn.model_selection import cross_validate\n",
    "from sklearn.ensemble import AdaBoostRegressor,BaggingRegressor,ExtraTreesRegressor,GradientBoostingRegressor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "57e24648-629d-4459-82c5-8144b9ab0139",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LinearRegression</label><div class=\"sk-toggleable__content\"><pre>LinearRegression()</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "LinearRegression()"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Fit Decision_tree\n",
    "lin_reg = LinearRegression()\n",
    "lin_reg.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "ebc5c281-952b-41df-959a-bdcf1e3406a2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-2 {color: black;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>DecisionTreeRegressor()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">DecisionTreeRegressor</label><div class=\"sk-toggleable__content\"><pre>DecisionTreeRegressor()</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "DecisionTreeRegressor()"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Fit Decision_tree\n",
    "tree = DecisionTreeRegressor()\n",
    "tree.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "de5a7721-7635-49d9-8b1a-b25deec9c1ab",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-3 {color: black;}#sk-container-id-3 pre{padding: 0;}#sk-container-id-3 div.sk-toggleable {background-color: white;}#sk-container-id-3 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-3 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-3 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-3 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-3 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-3 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-3 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-3 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-3 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-3 div.sk-item {position: relative;z-index: 1;}#sk-container-id-3 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-3 div.sk-item::before, #sk-container-id-3 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-3 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-3 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-3 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-3 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-3 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-3 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-3 div.sk-label-container {text-align: center;}#sk-container-id-3 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-3 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestRegressor(n_jobs=-1)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" checked><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestRegressor</label><div class=\"sk-toggleable__content\"><pre>RandomForestRegressor(n_jobs=-1)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "RandomForestRegressor(n_jobs=-1)"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Fit Random_forest\n",
    "forest = RandomForestRegressor(n_jobs=-1)\n",
    "forest.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "7448677c-e344-45e3-a896-90c48c28c303",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-4 {color: black;}#sk-container-id-4 pre{padding: 0;}#sk-container-id-4 div.sk-toggleable {background-color: white;}#sk-container-id-4 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-4 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-4 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-4 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-4 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-4 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-4 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-4 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-4 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-4 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-4 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-4 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-4 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-4 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-4 div.sk-item {position: relative;z-index: 1;}#sk-container-id-4 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-4 div.sk-item::before, #sk-container-id-4 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-4 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-4 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-4 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-4 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-4 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-4 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-4 div.sk-label-container {text-align: center;}#sk-container-id-4 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-4 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-4\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GradientBoostingRegressor()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" checked><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GradientBoostingRegressor</label><div class=\"sk-toggleable__content\"><pre>GradientBoostingRegressor()</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "GradientBoostingRegressor()"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Fit Gradient_Boosting_Regressor........\n",
    "Gradient_boosting = GradientBoostingRegressor()\n",
    "Gradient_boosting.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "8f44c162-a84c-48cf-a22b-f38c5ca7b596",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-5 {color: black;}#sk-container-id-5 pre{padding: 0;}#sk-container-id-5 div.sk-toggleable {background-color: white;}#sk-container-id-5 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-5 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-5 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-5 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-5 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-5 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-5 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-5 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-5 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-5 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-5 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-5 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-5 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-5 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-5 div.sk-item {position: relative;z-index: 1;}#sk-container-id-5 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-5 div.sk-item::before, #sk-container-id-5 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-5 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-5 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-5 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-5 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-5 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-5 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-5 div.sk-label-container {text-align: center;}#sk-container-id-5 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-5 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-5\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>AdaBoostRegressor()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-5\" type=\"checkbox\" checked><label for=\"sk-estimator-id-5\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">AdaBoostRegressor</label><div class=\"sk-toggleable__content\"><pre>AdaBoostRegressor()</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "AdaBoostRegressor()"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Fit Ada_Boost_Regressor..........\n",
    "Ada_boost = AdaBoostRegressor()\n",
    "Ada_boost.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "ecf73403-2fc5-4ec1-93b5-15f0562571d9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-6 {color: black;}#sk-container-id-6 pre{padding: 0;}#sk-container-id-6 div.sk-toggleable {background-color: white;}#sk-container-id-6 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-6 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-6 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-6 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-6 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-6 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-6 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-6 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-6 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-6 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-6 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-6 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-6 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-6 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-6 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-6 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-6 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-6 div.sk-item {position: relative;z-index: 1;}#sk-container-id-6 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-6 div.sk-item::before, #sk-container-id-6 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-6 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-6 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-6 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-6 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-6 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-6 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-6 div.sk-label-container {text-align: center;}#sk-container-id-6 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-6 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-6\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>BaggingRegressor()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-6\" type=\"checkbox\" checked><label for=\"sk-estimator-id-6\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">BaggingRegressor</label><div class=\"sk-toggleable__content\"><pre>BaggingRegressor()</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "BaggingRegressor()"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Fit Bagging_Regressor..........\n",
    "Bagging = BaggingRegressor()\n",
    "Bagging.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "ae065fb2-1054-4037-89bd-435b1d1dff43",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-7 {color: black;}#sk-container-id-7 pre{padding: 0;}#sk-container-id-7 div.sk-toggleable {background-color: white;}#sk-container-id-7 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-7 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-7 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-7 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-7 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-7 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-7 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-7 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-7 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-7 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-7 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-7 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-7 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-7 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-7 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-7 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-7 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-7 div.sk-item {position: relative;z-index: 1;}#sk-container-id-7 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-7 div.sk-item::before, #sk-container-id-7 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-7 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-7 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-7 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-7 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-7 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-7 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-7 div.sk-label-container {text-align: center;}#sk-container-id-7 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-7 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-7\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>ExtraTreesRegressor()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-7\" type=\"checkbox\" checked><label for=\"sk-estimator-id-7\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">ExtraTreesRegressor</label><div class=\"sk-toggleable__content\"><pre>ExtraTreesRegressor()</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "ExtraTreesRegressor()"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Fit Extra_tree_regressor........\n",
    "Extra_trees = ExtraTreesRegressor()\n",
    "Extra_trees.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "b1c38902-520b-4707-8ea9-6d259ef3aa9f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-8 {color: black;}#sk-container-id-8 pre{padding: 0;}#sk-container-id-8 div.sk-toggleable {background-color: white;}#sk-container-id-8 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-8 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-8 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-8 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-8 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-8 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-8 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-8 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-8 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-8 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-8 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-8 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-8 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-8 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-8 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-8 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-8 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-8 div.sk-item {position: relative;z-index: 1;}#sk-container-id-8 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-8 div.sk-item::before, #sk-container-id-8 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-8 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-8 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-8 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-8 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-8 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-8 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-8 div.sk-label-container {text-align: center;}#sk-container-id-8 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-8 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-8\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GradientBoostingRegressor()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-8\" type=\"checkbox\" checked><label for=\"sk-estimator-id-8\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GradientBoostingRegressor</label><div class=\"sk-toggleable__content\"><pre>GradientBoostingRegressor()</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "GradientBoostingRegressor()"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Fit Gradient_Boosting_Regressor........\n",
    "Gradient_boosting = GradientBoostingRegressor()\n",
    "Gradient_boosting.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "e40e18e7-855a-4bf1-a8ca-90448da31069",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'fit_time': array([4.60503864, 4.92438221, 4.61330438, 4.58569837, 4.57763982,\n",
      "       4.56192899, 4.59486485, 4.70357943, 4.64744616, 4.78008914]), 'score_time': array([0.        , 0.00805736, 0.        , 0.        , 0.        ,\n",
      "       0.        , 0.00800323, 0.        , 0.        , 0.        ]), 'test_score': array([0.14070454, 0.16488906, 0.1880859 , 0.21148795, 0.23824126,\n",
      "       0.21123098, 0.25819507, 0.20197217, 0.16895661, 0.20382737]), 'train_score': array([0.33380738, 0.32916379, 0.32829123, 0.33090424, 0.3250014 ,\n",
      "       0.32863835, 0.31865318, 0.33100733, 0.32807328, 0.32816641])}\n"
     ]
    }
   ],
   "source": [
    "models= [('lin_reg', lin_reg), ('forest', forest), ('dt', tree),('Ada_boost',Ada_boost),('Bagging',Bagging),('Extra_trees',Extra_trees),('Gradient_boosting',Gradient_boosting)]\n",
    "scoring = ['neg_mean_squared_error', 'neg_mean_absolute_error', 'r2']\n",
    "\n",
    "\n",
    "#for each model I want to test three different scoring metrics. Therefore, results[0] will be lin_reg x MSE, \n",
    "# results[1] lin_reg x MSE and so on until results [8], where we stored dt x r2\n",
    "\n",
    "results= []\n",
    "metric= []\n",
    "for name, model in models:\n",
    "    for i in scoring:\n",
    "        scores = cross_validate(model, X_train, y_train, scoring=i, cv=10, return_train_score=True)\n",
    "        results.append(scores)\n",
    "\n",
    "print(results[20])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "65412d02-99c3-44bd-81f7-75ef76f820d6",
   "metadata": {},
   "outputs": [],
   "source": [
    "#if you change signa and square the Mean Square Error you get the RMSE, which is the most common metric to accuracy\n",
    "LR_RMSE_mean = np.sqrt(-results[0]['test_score'].mean())\n",
    "LR_RMSE_std= results[0]['test_score'].std()\n",
    "# note that also here I changed the sign, as the result is originally a negative number for ease of computation\n",
    "LR_MAE_mean = -results[1]['test_score'].mean()\n",
    "LR_MAE_std= results[1]['test_score'].std()\n",
    "LR_r2_mean = results[2]['test_score'].mean()\n",
    "LR_r2_std = results[2]['test_score'].std()\n",
    "\n",
    "#THIS IS FOR RF\n",
    "RF_RMSE_mean = np.sqrt(-results[3]['test_score'].mean())\n",
    "RF_RMSE_std= results[3]['test_score'].std()\n",
    "RF_MAE_mean = -results[4]['test_score'].mean()\n",
    "RF_MAE_std= results[4]['test_score'].std()\n",
    "RF_r2_mean = results[5]['test_score'].mean()\n",
    "RF_r2_std = results[5]['test_score'].std()\n",
    "\n",
    "#THIS IS FOR DT\n",
    "DT_RMSE_mean = np.sqrt(-results[6]['test_score'].mean())\n",
    "DT_RMSE_std= results[6]['test_score'].std()\n",
    "DT_MAE_mean = -results[7]['test_score'].mean()\n",
    "DT_MAE_std= results[7]['test_score'].std()\n",
    "DT_r2_mean = results[8]['test_score'].mean()\n",
    "DT_r2_std = results[8]['test_score'].std()\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "#if you change signa and square the Mean Square Error you get the RMSE, which is the most common metric to accuracy\n",
    "ADA_RMSE_mean = np.sqrt(-results[9]['test_score'].mean())\n",
    "ADA_RMSE_std= results[9]['test_score'].std()\n",
    "# note that also here I changed the sign, as the result is originally a negative number for ease of computation\n",
    "ADA_MAE_mean = -results[10]['test_score'].mean()\n",
    "ADA_MAE_std= results[10]['test_score'].std()\n",
    "ADA_r2_mean = results[11]['test_score'].mean()\n",
    "ADA_r2_std = results[11]['test_score'].std()\n",
    "\n",
    "\n",
    "\n",
    "#if you change signa and square the Mean Square Error you get the RMSE, which is the most common metric to accuracy\n",
    "BAGGING_RMSE_mean = np.sqrt(-results[12]['test_score'].mean())\n",
    "BAGGING_RMSE_std= results[12]['test_score'].std()\n",
    "# note that also here I changed the sign, as the result is originally a negative number for ease of computation\n",
    "BAGGING_MAE_mean = -results[13]['test_score'].mean()\n",
    "BAGGING_MAE_std= results[13]['test_score'].std()\n",
    "BAGGING_r2_mean = results[14]['test_score'].mean()\n",
    "BAGGING_r2_std = results[14]['test_score'].std()\n",
    "\n",
    "\n",
    "#if you change signa and square the Mean Square Error you get the RMSE, which is the most common metric to accuracy\n",
    "ET_RMSE_mean = np.sqrt(-results[15]['test_score'].mean())\n",
    "ET_RMSE_std= results[15]['test_score'].std()\n",
    "# note that also here I changed the sign, as the result is originally a negative number for ease of computation\n",
    "ET_MAE_mean = -results[16]['test_score'].mean()\n",
    "ET_MAE_std= results[16]['test_score'].std()\n",
    "ET_r2_mean = results[17]['test_score'].mean()\n",
    "ET_r2_std = results[17]['test_score'].std()\n",
    "\n",
    "\n",
    "#if you change signa and square the Mean Square Error you get the RMSE, which is the most common metric to accuracy\n",
    "GB_RMSE_mean = np.sqrt(-results[18]['test_score'].mean())\n",
    "GB_RMSE_std= results[18]['test_score'].std()\n",
    "# note that also here I changed the sign, as the result is originally a negative number for ease of computation\n",
    "GB_MAE_mean = -results[19]['test_score'].mean()\n",
    "GB_MAE_std= results[19]['test_score'].std()\n",
    "GB_r2_mean = results[20]['test_score'].mean()\n",
    "GB_r2_std = results[20]['test_score'].std()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "09577a03-8486-432f-a858-d82f362b9d8b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Model</th>\n",
       "      <th>RMSE_mean</th>\n",
       "      <th>RMSE_std</th>\n",
       "      <th>MAE_mean</th>\n",
       "      <th>MAE_std</th>\n",
       "      <th>r2_mean</th>\n",
       "      <th>r2_std</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Gradient Boosting</td>\n",
       "      <td>0.276491</td>\n",
       "      <td>0.007960</td>\n",
       "      <td>0.151751</td>\n",
       "      <td>0.010346</td>\n",
       "      <td>0.198759</td>\n",
       "      <td>0.033113</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Linear Regression</td>\n",
       "      <td>0.288138</td>\n",
       "      <td>0.009069</td>\n",
       "      <td>0.187069</td>\n",
       "      <td>0.010304</td>\n",
       "      <td>0.131935</td>\n",
       "      <td>0.021223</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Random Forest</td>\n",
       "      <td>0.293368</td>\n",
       "      <td>0.007790</td>\n",
       "      <td>0.153993</td>\n",
       "      <td>0.009063</td>\n",
       "      <td>0.092702</td>\n",
       "      <td>0.053677</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Ada Boosting</td>\n",
       "      <td>0.297323</td>\n",
       "      <td>0.008949</td>\n",
       "      <td>0.209195</td>\n",
       "      <td>0.029592</td>\n",
       "      <td>0.052948</td>\n",
       "      <td>0.075455</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Extra trees</td>\n",
       "      <td>0.301608</td>\n",
       "      <td>0.007714</td>\n",
       "      <td>0.159084</td>\n",
       "      <td>0.008898</td>\n",
       "      <td>0.042773</td>\n",
       "      <td>0.073613</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Bagging</td>\n",
       "      <td>0.302711</td>\n",
       "      <td>0.007753</td>\n",
       "      <td>0.153798</td>\n",
       "      <td>0.010111</td>\n",
       "      <td>0.036740</td>\n",
       "      <td>0.062970</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Decision Trees</td>\n",
       "      <td>0.390748</td>\n",
       "      <td>0.016740</td>\n",
       "      <td>0.153712</td>\n",
       "      <td>0.014856</td>\n",
       "      <td>-0.617757</td>\n",
       "      <td>0.132020</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               Model  RMSE_mean  RMSE_std  MAE_mean   MAE_std   r2_mean  \\\n",
       "6  Gradient Boosting   0.276491  0.007960  0.151751  0.010346  0.198759   \n",
       "0  Linear Regression   0.288138  0.009069  0.187069  0.010304  0.131935   \n",
       "1      Random Forest   0.293368  0.007790  0.153993  0.009063  0.092702   \n",
       "3       Ada Boosting   0.297323  0.008949  0.209195  0.029592  0.052948   \n",
       "5        Extra trees   0.301608  0.007714  0.159084  0.008898  0.042773   \n",
       "4            Bagging   0.302711  0.007753  0.153798  0.010111  0.036740   \n",
       "2     Decision Trees   0.390748  0.016740  0.153712  0.014856 -0.617757   \n",
       "\n",
       "     r2_std  \n",
       "6  0.033113  \n",
       "0  0.021223  \n",
       "1  0.053677  \n",
       "3  0.075455  \n",
       "5  0.073613  \n",
       "4  0.062970  \n",
       "2  0.132020  "
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "modelDF = pd.DataFrame({\n",
    "    'Model'       : ['Linear Regression', 'Random Forest', 'Decision Trees','Ada Boosting','Bagging','Extra trees','Gradient Boosting'],\n",
    "    'RMSE_mean'    : [LR_RMSE_mean, RF_RMSE_mean, DT_RMSE_mean,ADA_RMSE_mean,BAGGING_RMSE_mean,ET_RMSE_mean,GB_RMSE_mean],\n",
    "    'RMSE_std'    : [LR_RMSE_std, RF_RMSE_std, DT_RMSE_std,ADA_RMSE_std,BAGGING_RMSE_std,ET_RMSE_std,GB_RMSE_std],\n",
    "    'MAE_mean'   : [LR_MAE_mean, RF_MAE_mean, DT_MAE_mean,ADA_MAE_mean,BAGGING_MAE_mean,ET_MAE_mean,GB_MAE_mean],\n",
    "    'MAE_std'   : [LR_MAE_std, RF_MAE_std, DT_MAE_std, ADA_MAE_std, BAGGING_MAE_std, ET_MAE_std, GB_MAE_std],\n",
    "    'r2_mean'      : [LR_r2_mean, RF_r2_mean, DT_r2_mean, ADA_r2_mean,BAGGING_r2_mean, ET_r2_mean, GB_r2_mean],\n",
    "    'r2_std'      : [LR_r2_std, RF_r2_std, DT_r2_std, ADA_r2_std,BAGGING_r2_std, ET_r2_std, GB_r2_std],\n",
    "    }, columns = ['Model', 'RMSE_mean', 'RMSE_std', 'MAE_mean', 'MAE_std', 'r2_mean', 'r2_std'])\n",
    "\n",
    "    \n",
    "modelDF.sort_values(by='r2_mean', ascending=False)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "7a6a4d3f-b8b4-4ee8-b898-ec2cac6cd2d2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='Model', ylabel='RMSE_mean'>"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import seaborn as sns\n",
    "# Set the width and height of the figure\n",
    "plt.figure(figsize=(10,6))\n",
    "sns.barplot(x= 'Model', y= 'RMSE_mean', data= modelDF)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "2e9e9869-9a1e-49c3-bb48-78c103705871",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-9 {color: black;}#sk-container-id-9 pre{padding: 0;}#sk-container-id-9 div.sk-toggleable {background-color: white;}#sk-container-id-9 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-9 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-9 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-9 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-9 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-9 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-9 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-9 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-9 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-9 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-9 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-9 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-9 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-9 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-9 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-9 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-9 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-9 div.sk-item {position: relative;z-index: 1;}#sk-container-id-9 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-9 div.sk-item::before, #sk-container-id-9 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-9 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-9 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-9 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-9 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-9 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-9 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-9 div.sk-label-container {text-align: center;}#sk-container-id-9 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-9 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-9\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(cv=10, estimator=ExtraTreesRegressor(), n_jobs=-1,\n",
       "             param_grid={&#x27;max_depth&#x27;: [4, 8, 12, 16],\n",
       "                         &#x27;max_features&#x27;: [0.3, 0.1],\n",
       "                         &#x27;min_samples_leaf&#x27;: [100, 150, 200, 250],\n",
       "                         &#x27;n_estimators&#x27;: [100, 200, 300, 400, 500]})</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-9\" type=\"checkbox\" ><label for=\"sk-estimator-id-9\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GridSearchCV</label><div class=\"sk-toggleable__content\"><pre>GridSearchCV(cv=10, estimator=ExtraTreesRegressor(), n_jobs=-1,\n",
       "             param_grid={&#x27;max_depth&#x27;: [4, 8, 12, 16],\n",
       "                         &#x27;max_features&#x27;: [0.3, 0.1],\n",
       "                         &#x27;min_samples_leaf&#x27;: [100, 150, 200, 250],\n",
       "                         &#x27;n_estimators&#x27;: [100, 200, 300, 400, 500]})</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-10\" type=\"checkbox\" ><label for=\"sk-estimator-id-10\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">estimator: ExtraTreesRegressor</label><div class=\"sk-toggleable__content\"><pre>ExtraTreesRegressor()</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-11\" type=\"checkbox\" ><label for=\"sk-estimator-id-11\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">ExtraTreesRegressor</label><div class=\"sk-toggleable__content\"><pre>ExtraTreesRegressor()</pre></div></div></div></div></div></div></div></div></div></div>"
      ],
      "text/plain": [
       "GridSearchCV(cv=10, estimator=ExtraTreesRegressor(), n_jobs=-1,\n",
       "             param_grid={'max_depth': [4, 8, 12, 16],\n",
       "                         'max_features': [0.3, 0.1],\n",
       "                         'min_samples_leaf': [100, 150, 200, 250],\n",
       "                         'n_estimators': [100, 200, 300, 400, 500]})"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.model_selection import GridSearchCV,StratifiedKFold\n",
    "\n",
    "ETC = ExtraTreesRegressor()\n",
    "gb_param_grid = {'n_estimators' : [100,200,300,400,500],\n",
    "              'max_depth': [4, 8,12,16],\n",
    "              'min_samples_leaf' : [100,150,200,250],\n",
    "              'max_features' : [0.3, 0.1] \n",
    "              }\n",
    "\n",
    "gsETC = GridSearchCV(ETC,param_grid = gb_param_grid, cv=10, n_jobs= -1, verbose = 0)\n",
    "\n",
    "gsETC.fit(X_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "e46e8152-bb64-40e9-b327-54db09d08e51",
   "metadata": {},
   "outputs": [],
   "source": [
    "ETC_best = gsETC.best_estimator_\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "8c0bd997-1d4e-4bd4-bbe5-4fee7edceb37",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.0963199523227056,\n",
       " {'max_depth': 16,\n",
       "  'max_features': 0.3,\n",
       "  'min_samples_leaf': 100,\n",
       "  'n_estimators': 200})"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Best score\n",
    "gsETC.best_score_,gsETC.best_params_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "de875678-d47d-4bde-9edc-7d559d56f748",
   "metadata": {},
   "outputs": [],
   "source": [
    "# =============================================================================\n",
    "# Model creation\n",
    "# =============================================================================\n",
    "\n",
    "\n",
    "ETC = ExtraTreesRegressor(max_depth= 8,max_features = 0.3,min_samples_leaf =  100,n_estimators= 500)\n",
    "ETC.fit(X_train, y_train)\n",
    "\n",
    "\n",
    "#predicting the test set\n",
    "y_pred = ETC.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "42e2f641-fb2f-46d2-8a75-7a169b660982",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MAE: 0.18879031734879406\n",
      "MSE: 0.09490101144105813\n",
      "RMSE: 0.3080600776489192\n"
     ]
    }
   ],
   "source": [
    "from sklearn import metrics\n",
    "print(\"MAE:\", metrics.mean_absolute_error(y_test, y_pred))\n",
    "print('MSE:', metrics.mean_squared_error(y_test, y_pred))\n",
    "print('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "44f54edc-7ad8-49be-bbae-4c1bd1842e6f",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
